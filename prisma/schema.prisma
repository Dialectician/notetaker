generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    topics        Topic[]
    estimates     Estimate[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Topic {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    notes     Note[]
}

model Note {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    content   String
    topic     Topic    @relation(fields: [topicId], references: [id])
    topicId   String
}

model Customer {
    id                  String     @id @default(cuid())
    name                String
    contactInfo         String
    address             String
    billingPreferences  String
    specialInstructions String?
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    estimates           Estimate[]
}

model Estimate {
    id         String         @id @default(cuid())
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    customerId String
    customer   Customer       @relation(fields: [customerId], references: [id])
    items      EstimateItem[]
    notes      String?
    terms      String?
    discount   Float          @default(0)
    taxRate    Float          @default(0)
    totalCost  Float
    User       User?          @relation(fields: [userId], references: [id])
    userId     String?
}

model EstimateItem {
    id          String   @id @default(cuid())
    description String
    quantity    Int
    unitPrice   Float
    estimateId  String
    estimate    Estimate @relation(fields: [estimateId], references: [id])
}
